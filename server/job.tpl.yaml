apiVersion: batch/v1
kind: Job
metadata:
  name: {{ name }}
  namespace: {{ namespace }}
spec:
  completions: {{ replicas }}
  parallelism: {{ replicas }}
  backoffLimit: {{ backoffLimit }}
  activeDeadlineSeconds: {{ activeDeadlineSeconds }}
  ttlSecondsAfterFinished: {{ ttlSecondsAfterFinished }}
  template:
    metadata:
      labels:
        type: "uws-job"
        argocd.argoproj.io/instance: "ocps-uws-job"
        jobId: "{{ jobId }}"
        runId: "{{ runId }}"
    spec:
      restartPolicy: Never
      securityContext:
        runAsUser: {{ securityContext['runAsUser'] }}
        runAsGroup: {{ securityContext['runAsGroup'] }}
        fsGroup: {{ securityContext['fsGroup'] }}
        privileged: false
      volumes:
        # Volume to host job data
        - name: "{{ workingVolume['name'] }}"
          persistentVolumeClaim:
            claimName: "{{ workingVolume['claimName'] }}"
      {%- for volume in volumes %}
        - name: {{ volume.name }}
        {%- if volume.claimName %}
          persistentVolumeClaim:
            claimName: {{ volume.claimName }}
        {%- else %}
          emptyDir: {}
        {%- endif %}
      {%- endfor %}
      {%- if butler_pg %}
        - name: butler-secret
          emptyDir: {}
        - name: raw-butler-secret
          secret:
            secretName: {{ namespace }}-uws-api-server-butler-secret
            defaultMode: 0600
      {%- endif %}
      initContainers:
      - name: {{ container_name }}-init
        image: {{ image.repository }}:{{ image.tag }}
        imagePullPolicy: {{ image.pull_policy }}
        volumeMounts:
        - name: "{{ workingVolume['name'] }}"
          mountPath: "{{ workingVolume['mountPath'] }}"
          subPath: "{{ workingVolume['subPath'] }}"
        env:
          - name: "SRC_GIT_URL"
            value: "{{ url }}"
          - name: "GIT_COMMIT_REF"
            value: "{{ commit_ref }}"
          # The clone_dir is assumed to be a subfolder of uws_root_dir
          - name: "GIT_CLONE_DIR"
            value: "{{ clone_dir }}"
          - name: "JOB_OUTPUT_DIR"
            value: "{{ job_output_dir }}"
        command:
        - /bin/bash
        - -c
        - |
          mkdir -p "${JOB_OUTPUT_DIR}" && \
        {%- if clone_dir and url %}
          git config --global user.name "UWS Job"  && \
          git config --global user.email "fake@example.com"  && \
          echo "Cloning git repo ${SRC_GIT_URL} to ${GIT_CLONE_DIR} ..." && \
          git clone "${SRC_GIT_URL}" "${GIT_CLONE_DIR}" || echo "Git repo already present." && \
          echo "Moving to ${GIT_CLONE_DIR}" and fetching updates ... && \
          cd "${GIT_CLONE_DIR}" && \
          git fetch -a && \
          echo "Resetting to HEAD ..." && \
          git reset --quiet --hard HEAD && \
        {%- if commit_ref %}
          echo "Checking out reference ${GIT_COMMIT_REF} ..." && \
          git checkout "${GIT_COMMIT_REF}" && \
        {%- endif %}
          echo "Pulling latest commits ..." && \
          git pull && \
          echo "Git repo is ready."
        {%- endif %}
          echo ""
      {%- if butler_pg %}
      - name: {{ container_name}}-butler-secret-perm-fix
        image: "alpine:latest"
        command:
          - "/bin/ash"
          - "-c"
          - |
            cp -RL /secrets-raw/* /secrets
            chown {{ securityContext['runAsUser'] }}:{{ securityContext['runAsGroup'] }} /secrets/*
            chmod 0600 /secrets/*
        volumeMounts:
          - name: raw-butler-secret
            mountPath: /secrets-raw
            readOnly: true
          - name: butler-secret
            mountPath: /secrets
      {%- endif %}
      containers:
      - name: {{ container_name }}
        image: {{ image.repository }}:{{ image.tag }}
        imagePullPolicy: {{ image.pull_policy }}
        command:
        - '/bin/bash'
        - '-c'
        - {{ command }}
        resources:
          limits:
            cpu: 8
            memory: 32Gi
          requests:
            cpu: 1
            memory: 4Gi
        env:
          {%- if clone_dir %}
          # The "JOB_SOURCE_DIR" provides the job script with the path to the location
          # of the cloned git repo (optional).
          - name: "JOB_SOURCE_DIR"
            value: "{{ clone_dir }}"
          - name: "SRC_GIT_URL"
            value: "{{ url }}"
          - name: "GIT_COMMIT_REF"
            value: "{{ commit_ref }}"
          {%- endif %}
          # The "JOB_OUTPUT_DIR" provides the job script with the path to the output
          # directory where the job results are expected to be stored.
          - name: "JOB_OUTPUT_DIR"
            value: "{{ job_output_dir }}"
          # The "JOB_ID" provides the job script with the UUID associated with the job.
          - name: "JOB_ID"
            value: "{{ jobId }}"
          # Custom environment variables are defined here if provided in the job creation request
          {% for env in environment %}
          - name: "{{ env.name }}"
            value: "{{ env.value }}"
          {% endfor %}
          {%- if butler_pg %}
          - name: "PGPASSFILE"
            value: "{{ butler_pg.containerPath }}/postgres-credentials.txt"
          - name: "PGUSER"
            value: "{{ butler_pg.dbUser }}"
          {%- endif %}
        volumeMounts:
          - name: "{{ workingVolume.name }}"
            mountPath: "{{ workingVolume.mountPath }}"
            subPath: "{{ workingVolume.subPath }}"
        {%- for volume in volumes %}
          - name: {{ volume.name }}
            mountPath: "{{ volume.mountPath }}"
            subPath: "{{ volume.subPath }}"
            readOnly: {{ volume.readOnly }}
        {%- endfor %}
        {%- if butler_pg %}
          - name: butler-secret
            mountPath: "{{ butler_pg.containerPath }}"
        {%-endif %}
